{"version":3,"sources":["Slider/Slider.module.scss","Slider/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Slider","children","header","width","height","direction","className","styles","wrapper","items","Header","title","Items","map","item","index","key","Item","leftPosition","top","left","background","style","borderRadius","label","price","App","display","alignItems","fontSize","fontFamily","lineHeight","marginLeft","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yGACAA,EAAOC,QAAU,CAAC,MAAQ,sBAAsB,QAAU,wBAAwB,KAAO,qBAAqB,MAAQ,sBAAsB,MAAQ,wB,oJCmB9IC,EAA6C,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACjD,oCACGA,EAASC,OACV,kBAAC,SAAD,CACEC,MAAK,QACLC,OAAQ,IACRC,UAAU,aACVC,UAAWC,IAAOC,SAEjBP,EAASQ,SAKhBT,EAAOU,OAAS,gBAAGT,EAAH,EAAGA,SAAH,OACd,yBAAKK,UAAWC,IAAOI,OAAQV,IAGjCD,EAAOY,MAAQ,gBAAGH,EAAH,EAAGA,MAAH,OACb,oCACGA,EAAMI,KAAI,SAACC,EAAWC,GAAZ,OACT,kBAAC,EAAD,CAAMC,IAAG,iBAAYD,GAASA,MAAOA,GAClCD,QAMT,IAAMG,EAAsB,SAAC,GAAyB,IAAvBhB,EAAsB,EAAtBA,SAAUc,EAAY,EAAZA,MACjCG,EAAeH,GAAS,IAAMA,EAAQ,GAC5C,OACE,kBAAC,QAAD,CACEZ,MAAO,IACPC,OAAQ,IACRe,IAAK,GACLC,KAAMF,EACNG,WAAY,MAEZ,yBACEC,MAAO,CACLnB,MAAO,OACPC,OAAQ,OACRmB,aAAc,UACdF,WAAY,mBAGhB,0BAAMf,UAAWC,IAAOiB,OAAQvB,EAASuB,OACzC,0BAAMlB,UAAWC,IAAOkB,OAAQxB,EAASwB,SAKhCzB,ICnETS,G,MAAQ,CACZ,CAAEe,MAAO,cAAeC,MAAO,gBAC/B,CAAED,MAAO,cAAeC,MAAO,eAC/B,CAAED,MAAO,cAAeC,MAAO,eAC/B,CAAED,MAAO,cAAeC,MAAO,mBAsClBC,MAnCf,WACE,OACE,kBAAC,EAAD,KACG,CACCxB,OACE,kBAAC,EAAOQ,OAAR,KACE,8CACA,yBAAKY,MAAO,CAAEK,QAAS,OAAQC,WAAY,WACzC,0BACEN,MAAO,CACLO,SAAU,SACVC,WAAY,oBACZC,WAAY,IAJhB,aASA,0BACET,MAAO,CACLO,SAAU,UACVG,WAAY,SACZD,WAAY,IAJhB,YAYNtB,MAAO,kBAAC,EAAOG,MAAR,CAAcH,MAAOA,OC7BhBwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.74556ba2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Slider_title__36uvr\",\"wrapper\":\"Slider_wrapper__3Urzc\",\"item\":\"Slider_item__3rGqD\",\"label\":\"Slider_label__1XB4W\",\"price\":\"Slider_price__2rWsy\"};","import React, { FC, ReactNode } from \"react\";\nimport { Frame, Scroll } from \"framer\";\n\nimport styles from \"./Slider.module.scss\";\n\ntype SliderProps = {\n  children: {\n    header: ReactNode;\n    items: ReactNode;\n  };\n};\ntype ItemProps = {\n  children: { label: string; price: string };\n  index: number;\n};\ntype SliderComponents = {\n  Header: FC<any>;\n  Items: FC<{ items: Array<any> }>;\n};\n\nconst Slider: FC<SliderProps> & SliderComponents = ({ children }) => (\n  <>\n    {children.header}\n    <Scroll\n      width={`100vw`}\n      height={350}\n      direction=\"horizontal\"\n      className={styles.wrapper}\n    >\n      {children.items}\n    </Scroll>\n  </>\n);\n\nSlider.Header = ({ children }) => (\n  <div className={styles.title}>{children}</div>\n);\n\nSlider.Items = ({ items }) => (\n  <>\n    {items.map((item: any, index: number) => (\n      <Item key={`slider|${index}`} index={index}>\n        {item}\n      </Item>\n    ))}\n  </>\n);\n\nconst Item: FC<ItemProps> = ({ children, index }) => {\n  const leftPosition = index && 300 * index + 20;\n  return (\n    <Frame\n      width={280}\n      height={180}\n      top={45}\n      left={leftPosition}\n      background={null}\n    >\n      <div\n        style={{\n          width: \"100%\",\n          height: \"100%\",\n          borderRadius: \"0.25rem\",\n          background: \"rgb(0,95,107)\"\n        }}\n      />\n      <span className={styles.label}>{children.label}</span>\n      <span className={styles.price}>{children.price}</span>\n    </Frame>\n  );\n};\n\nexport default Slider;\n","import React from \"react\";\n\nimport Slider from \"./Slider\";\nimport \"./App.css\";\n\nconst items = [\n  { label: \"Producto 01\", price: \"35.00 €\" },\n  { label: \"Producto 02\", price: \"5.00 €\" },\n  { label: \"Producto 03\", price: \"1000 €\" },\n  { label: \"Producto 03\", price: \"115.00 €\" }\n];\n\nfunction App() {\n  return (\n    <Slider>\n      {{\n        header: (\n          <Slider.Header>\n            <span>Recomendados</span>\n            <div style={{ display: \"flex\", alignItems: \"center\" }}>\n              <span\n                style={{\n                  fontSize: \"0.8rem\",\n                  fontFamily: \"Montserrat Medium\",\n                  lineHeight: 1\n                }}\n              >\n                Ver Todos\n              </span>\n              <span\n                style={{\n                  fontSize: \"1.25rem\",\n                  marginLeft: \"0.2rem\",\n                  lineHeight: 1\n                }}\n              >\n                ▸\n              </span>\n            </div>\n          </Slider.Header>\n        ),\n        items: <Slider.Items items={items} />\n      }}\n    </Slider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}